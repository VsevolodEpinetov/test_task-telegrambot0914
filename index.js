// ‚îå‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Table of Contents ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚îê
// ‚îÇ 0. Modules and packages                                     ‚îÇ
// ‚îÇ 1. Scenes                                                   ‚îÇ
// ‚îÇ 2. DB (PostgreSQL) init                                     ‚îÇ
// ‚îÇ 3. Triggers                                                 ‚îÇ
// ‚îÇ 4. Service                                                  ‚îÇ
// ‚îî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚îò

import dotenv from "dotenv"
dotenv.config();

// --------------------------------------------------------------------------
// 0. Modules and packages
// --------------------------------------------------------------------------
// The bot itself
import { Telegraf, Markup, Telegram, Scenes } from 'telegraf';
const bot = new Telegraf(process.env.BOT_TOKEN)
const telegram = new Telegram(process.env.BOT_TOKEN)

// Misc
import axios from 'axios';
import checkUser from './lib/util.js';

// --------------------------------------------------------------------------
// 1. Scenes
// --------------------------------------------------------------------------
// Handler factories
const { enter, leave } = Scenes.Stage;

// Mailing Scene
// Wait for the message from the user and send it to all OTHER previously registered
// users.
const mailingScene = new Scenes.BaseScene('mailingScene');;
mailingScene.enter(ctx => {
  ctx.replyWithHTML('<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.</b>')
})
mailingScene.on('text', async (ctx) => {
  await ctx.reply(`–ü–æ–Ω—è–ª! –û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n${ctx.message.text}`)
  let counter = 0;
  await ctx.session.users.forEach(async userID => {
    if (userID !== ctx.from.id) {
      counter++;
      await telegram.sendMessage(
        userID,
        `–¢–µ–±–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n<i>${ctx.message.text}</i>`,
        { parse_mode: 'HTML' }
      )
    }
  })
  ctx.reply(`–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ${counter} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`)
  return ctx.scene.leave();
})
mailingScene.on('message', (ctx) => {
  ctx.replyWithHTML(`–û–∂–∏–¥–∞—é –æ—Ç —Ç–µ–±—è —Ç–æ–ª—å–∫–æ –∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ <b>—Ç–µ–∫—Å—Ç–æ–≤–æ–µ</b> —Å–æ–æ–±—â–µ–Ω–∏–µ!`)
})
mailingScene.leave(ctx => {});

const stage = new Scenes.Stage([mailingScene]);

// --------------------------------------------------------------------------
// 2. DB (PostgreSQL) init
// --------------------------------------------------------------------------
import PostgresSession from 'telegraf-postgres-session'; // be aware that I made a teeny-tine custom change to the package
bot.use((new PostgresSession({
  connectionString: process.env.DATABASE_URL,
  ssl: false
}, 'global')).middleware());
bot.use(stage.middleware()); // it should be exactly here.


// --------------------------------------------------------------------------
// 3. Triggers
// --------------------------------------------------------------------------

// Command '/start'
// Greets user and offers 3 button to press
bot.command('start', (ctx) => {
  checkUser(ctx);
  ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∫–Ω–æ–ø–∫—É.', {
    parse_mode: 'HTML',
    ...Markup.keyboard([
      ["–ü–æ–≥–æ–¥–∞ –≤ –ö–∞–Ω–∞–¥–µ"],
      ["–•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å!"],
      ["–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"]
    ])
  });
})

// Message '–ü–æ–≥–æ–¥–∞ –≤ –ö–∞–Ω–∞–¥–µ'
// Send a http request to the open-meteo.com, parse info
// and edit an initial message with the gotten information.
// Hard coded to get the weather for Vancouver
bot.hears('–ü–æ–≥–æ–¥–∞ –≤ –ö–∞–Ω–∞–¥–µ', (ctx) => {
  checkUser(ctx);
  ctx.reply('–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...').then((nctx) => {
    axios
      .get('https://api.open-meteo.com/v1/forecast?latitude=49.25&longitude=-123.12&current_weather=true')
      .then(res => {
        const info = res.data.current_weather;
        ctx.telegram.editMessageText(nctx.chat.id, nctx.message_id, undefined, `<b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞</b>\n\nüìç<b>–ú–µ—Å—Ç–æ:</b> –ö–∞–Ω–∞–¥–∞, –í–∞–Ω–∫—É–≤–µ—Ä\nüå°<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> ${info.temperature}\nüå¨<b>–í–µ—Ç–µ—Ä:</b> ${info.windspeed} –∫–º/—á, ${info.winddirection}¬∞`, { parse_mode: 'HTML' });
      })
      .catch(error => {
        console.error(error);
      });
  })
})

// Message '–•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å!'
// Sends 2 messages. First one is the photo of a book cover gotten from the direct
// url. Photo has a caption.
// Second message is a file message with a zip-archive from the direct url as well.
bot.hears('–•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å!', async (ctx) => {
  checkUser(ctx);

  await ctx.replyWithPhoto('https://pythonist.ru/wp-content/uploads/2020/03/photo_2021-02-03_10-47-04-350x2000-1.jpg',
    { caption: '–ò–¥–µ–∞–ª—å–Ω—ã–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ Python. –í—ã –Ω–∞–π–¥–µ—Ç–µ –º–æ—Ä–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–∞—Ö –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö –≤ Python, –∏–º–µ–Ω–∞—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö, –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö –∏ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö.' })
  ctx.replyWithDocument('https://drive.google.com/u/0/uc?id=1Xs_YjOLgigsuKl17mOnR_488MdEKloCD&export=download')
})

// Message '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É!
// Sends a message with 2 inline buttons.
// First option allows to send a message to all previously registered users.
// Second options cancels the request.
bot.hears('–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', (ctx) => {
  checkUser(ctx);

  ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?', {
    parse_mode: 'HTML',
    ...Markup.inlineKeyboard([
      Markup.button.callback('‚úÖ –£–≤–µ—Ä–µ–Ω', `affirm-dialogue`),
      Markup.button.callback('üö´ –û—Ç–º–µ–Ω–∞', `cancel-dialogue`)
    ])
  })
})

// Action 'affirm-dialogue'
// Clears the keyboard and enters the mailingScene.
bot.action('affirm-dialogue', async ctx => {
  ctx.editMessageReplyMarkup();
  return ctx.scene.enter('mailingScene');
})

// Action 'cancel-dialogue'
// Clears the keyboard and sends a message with confirmation of cancellation.
bot.action('cancel-dialogue', async ctx => {
  ctx.editMessageReplyMarkup();
  ctx.reply('–û–∫–µ–π, –Ω–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç :)')
})

// Every other message
// Sens a proposition to execute the /start command.
bot.on('message', ctx => {
  ctx.reply('–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å /start, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤–¥—Ä—É–≥ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å!')
});


// --------------------------------------------------------------------------
// 4. Service
// --------------------------------------------------------------------------
bot.launch()
// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))